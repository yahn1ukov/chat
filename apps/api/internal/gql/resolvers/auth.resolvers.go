package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"net/http"

	"github.com/yahn1ukov/chat/apps/api/internal/dto"
	"github.com/yahn1ukov/chat/apps/api/internal/gql/gqlmodels"
	"github.com/yahn1ukov/chat/apps/api/internal/http/middlewares"
	sessionstore "github.com/yahn1ukov/chat/apps/api/internal/http/session_store"
	"github.com/yahn1ukov/chat/apps/api/internal/pubsub"
)

func (r *mutationResolver) Auth(ctx context.Context, input gqlmodels.AuthInput) (bool, error) {
	session := r.sessionStore.GetSession(ctx)

	dto := &dto.CreateUserDto{
		Username: input.Username,
	}

	user, err := r.userService.Create(ctx, dto)
	if err != nil {
		return false, err
	}

	w := ctx.Value(middlewares.RESPONSE_WRITER_KEY).(http.ResponseWriter)
	req := ctx.Value(middlewares.REQUEST_KEY).(*http.Request)

	session.Values[sessionstore.USER_ID_KEY] = user.ID.String()
	session.Save(req, w)

	go func() {
		r.pubsub.Publish(pubsub.USER_ADDED, user)
	}()

	return true, nil
}
